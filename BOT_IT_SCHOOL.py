import telebot
from telebot import types
from config import token, public_key, private_key, url_endpoin, hi, thank, bye, data, hru
from colorthief import ColorThief as ct
# from imagekitio import ImageKit
from rembg import remove
import webcolors
import os
import json
from PIL import Image
import easygui as eg

bot = telebot.TeleBot(token)

@bot.message_handler(commands=['start', '—Å—Ç–∞—Ä—Ç', '–Ω–∞—á–∞—Ç—å', '–ø—Ä–∏–≤–µ—Ç'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn1 = types.KeyboardButton("–ü–∞–ª–∏—Ç—Ä–∞ —Ü–≤–µ—Ç–æ–≤")
    btn2 = types.KeyboardButton("–£–±—Ä–∞—Ç—å —Ñ–æ–Ω")
    btn3 = types.KeyboardButton("–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏")
    btn4 = types.KeyboardButton("–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é")
    markup.add(btn1, btn2, btn3, btn4)

    bot.send_message(message.chat.id,
                     f"–ü—Ä–∏–≤–µ—Ç, <b>{message.chat.first_name}</b>) –Ø –ø–æ–º–æ—â–Ω–∏–∫ –¥–∏–∑–∞–π–Ω–µ—Ä–∞)\n\n–ö–∞–∫ —è –º–æ–≥—É —Ç–µ–±–µ –ø–æ–º–æ—á—å?",
                     parse_mode='html', reply_markup=markup)

@bot.message_handler(content_types=["text"])
def main(message):
    global data
    gs_data(message)
    data[message.from_user.id]['flag'] = True
    base(message)
    if data[message.from_user.id]['flag']:
        bot.send_message(message.chat.id, "–¢–∞–∫, —è - –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–∏–∑–∞–π–Ω–µ—Ä–∞. –ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–±–æ–ª—Ç–∞—Ç—å, –æ–±—Ä–∞—Ç–∏—Å—å –∫ –º–æ–µ–π –∫–æ–ª–ª–µ–≥–µ –ê–ª–∏—Å–µ –∏–∑ –Ø–Ω–¥–µ–∫—Å–∞ ü§®")

def base(message): #–±–∞–∑–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã
    global data
    gs_data(message)
    data[message.from_user.id]['flag'] = True
    for word in hi:
        if word in message.text.strip().lower():
            start(message)
            data[message.from_user.id]['flag'] = False
            break
    if data[message.from_user.id]['flag'] and data[message.from_user.id]['photo'] != '' and ("–ø–∞–ª–∏—Ç—Ä" in message.text.strip().lower() or "colors" in message.text.strip().lower() or "—Ü–≤–µ—Ç" in message.text.strip().lower()):
        color_picker(message)
        data[message.from_user.id]['flag'] = False
    elif data[message.from_user.id]['flag'] and ("–ø–∞–ª–∏—Ç—Ä" in message.text.strip().lower() or "colors" in message.text.strip().lower() or "—Ü–≤–µ—Ç" in message.text.strip().lower()):
        bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –Ω–∞ —Ü–≤–µ—Ç–∞. –ê –ø–æ—Ç–æ–º –º–æ–∂–µ—à—å —Å–º–µ–ª–æ –Ω–∞–∂–∏–º–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É '–ü–∞–ª–∏—Ç—Ä–∞ —Ü–≤–µ—Ç–æ–≤'")
        data[message.from_user.id]['flag'] = False
    elif data[message.from_user.id]['flag'] and ("save" in message.text.strip().lower() or "—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç" in message.text.strip().lower() or "—Å–æ—Ö—Ä" in message.text.strip().lower()):
        history(message)
    elif data[message.from_user.id]['flag'] and ("clear" in message.text.strip().lower() or "—á–∏—Å—Ç–∏—Ç" in message.text.strip().lower() or "—É–¥–∞–ª–∏—Ç—å" in message.text.strip().lower() or "delete" in message.text.strip().lower()):
        clear(message)
    elif data[message.from_user.id]['flag'] and ("—Ñ–æ–Ω" in message.text.strip().lower() or "remove" in message.text.strip().lower() or "—É–±—Ä–∞—Ç—å" in message.text.strip().lower() or "background" in message.text.strip().lower()):
        bg_remover(message)
    reply(message, thank, "–û–±—Ä–∞—â–∞–π—Å—è)üòâ")
    reply(message, bye, "–î–æ —Å–∫–æ—Ä–æ–≥–æ)")
    reply(message, hru, "–û—Ç–ª–∏—á–Ω–æ! –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—à—å—Å—è)")

def gs_data(message): #–æ–±–Ω—É–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    global data
    if message.from_user.id not in data:
        data[message.from_user.id] = {'colors': {}, 'flag': True, 'photo': ''}

def reply(message, mas, text): #–æ—Ç–≤–µ—Ç
    global data
    gs_data(message)
    if data[message.from_user.id]['flag']:
        for word in mas:
            if word in message.text.strip().lower():
                bot.send_message(message.chat.id, text)
                data[message.from_user.id]['flag'] = False
                break

def history(message): #—Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    global data
    gs_data(message)
    data[message.from_user.id]['flag'] = True
    history = ''
    if data[message.from_user.id]['flag'] and data[message.from_user.id]['colors'] != {} and ("history" in message.text.strip().lower() or "—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç" in message.text.strip().lower() or "—Å–æ—Ö—Ä" in message.text.strip().lower()):
        for key, value in data[message.from_user.id]['colors'].items():
            history += key + '\n'
            for el in value:
                history += el + '\n'
        bot.send_message(message.chat.id, history)
        with open('DB.json', 'w', encoding='utf-8') as f:
            json.dump(data, f, indent=4, sort_keys=False, ensure_ascii=False)
        data[message.from_user.id]['flag'] = False
    elif data[message.from_user.id]['flag'] and ("save" in message.text.strip().lower() or "—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç" in message.text.strip().lower() or "—Å–æ—Ö—Ä" in message.text.strip().lower()):
        bot.send_message(message.chat.id, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö. –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–æ—Ç–æ')
        data[message.from_user.id]['flag'] = False

def clear(message):
    global data
    gs_data(message)
    data[message.from_user.id]['flag'] = True
    if data[message.from_user.id]['flag'] and data[message.from_user.id]['colors'] != {} and ("clear" in message.text.strip().lower() or "—á–∏—Å—Ç–∏—Ç" in message.text.strip().lower() or "—É–¥–∞–ª–∏—Ç—å" in message.text.strip().lower() or "delete" in message.text.strip().lower()):
        data[message.from_user.id]['colors'] = {}
        data[message.from_user.id]['photo'] = ''
        print(data)
        bot.send_message(message.chat.id, '–ò—Å—Ç–æ—Ä–∏—è –ø–∞–ª–∏—Ç—Ä —Ü–≤–µ—Ç–æ–≤ –æ—á–∏—â–µ–Ω–∞')
        data[message.from_user.id]['flag'] = False
    elif data[message.from_user.id]['flag'] and ("clear" in message.text.strip().lower() or "—á–∏—Å—Ç–∏—Ç" in message.text.strip().lower() or "—É–¥–∞–ª–∏—Ç—å" in message.text.strip().lower() or "delete" in message.text.strip().lower()):
        bot.send_message(message.chat.id, '–ò—Å—Ç–æ—Ä–∏—è –ø–∞–ª–∏—Ç—Ä —Ü–≤–µ—Ç–æ–≤ –ø—É—Å—Ç–∞')
        data[message.from_user.id]['flag'] = False

def bg_remover(message):
    try:
        global data
        gs_data(message)
        data[message.from_user.id]['flag'] = True
        if data[message.from_user.id]['flag'] and data[message.from_user.id]['photo'] != '' and ("—Ñ–æ–Ω" in message.text.strip().lower() or "remove" in message.text.strip().lower() or "—É–±—Ä–∞—Ç—å" in message.text.strip().lower() or "background" in message.text.strip().lower()):
            input_path = data[message.from_user.id]['photo']
            output_path = f"rembg/{data[message.from_user.id]['photo'].split('/')[2]}"
            # os.makedirs(os.path.dirname(output_path), exist_ok=True)
            bot.send_message(message.chat.id, "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–æ—Ç–æ...")
            with open(input_path, 'rb') as i:
                with open(output_path, 'wb') as o:
                    input = i.read()
                    output = remove(input)
                    o.write(output)
            bot.send_photo(message.chat.id, photo=open(output_path, 'rb'))
            data[message.from_user.id]['flag'] = False
        elif data[message.from_user.id]['flag'] and ("—Ñ–æ–Ω" in message.text.strip().lower() or "remove" in message.text.strip().lower() or "—É–±—Ä–∞—Ç—å" in message.text.strip().lower() or "background" in message.text.strip().lower()):
            bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å. –ê –ø–æ—Ç–æ–º –º–æ–∂–µ—à—å —Å–º–µ–ª–æ –Ω–∞–∂–∏–º–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É '–£–±—Ä–∞—Ç—å —Ñ–æ–Ω'")
            data[message.from_user.id]['flag'] = False
    except Exception as ex:
        bot.reply_to(message, ex)


@bot.message_handler(content_types=["photo"])
def image(message):
    try:
        gs_data(message)
        data[message.from_user.id]['flag'] = True
        data[message.from_user.id]['photo'] = ''
        file_info = bot.get_file(message.photo[len(message.photo) - 1].file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        src = 'files/' + file_info.file_path
        with open(src, 'wb') as new_file:
            new_file.write(downloaded_file)
        if src not in data[message.from_user.id]['colors']:
            data[message.from_user.id]['colors'][src] = []
        data[message.from_user.id]['photo'] = src
        msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å —Å —Ñ–æ—Ç–æ")
        bot.register_next_step_handler(msg, color_picker)
    except Exception as ex:
        bot.reply_to(message, ex)

def color_picker(message):
    try:
        global data
        gs_data(message)
        data[message.from_user.id]['flag'] = True
        src = ''
        if "save" in message.text.strip().lower() or "—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç" in message.text.strip().lower() or "—Å–æ—Ö—Ä" in message.text.strip().lower():
            history(message)
        elif data[message.from_user.id]['flag'] and ("clear" in message.text.strip().lower() or "—á–∏—Å—Ç–∏—Ç" in message.text.strip().lower() or "—É–¥–∞–ª–∏—Ç—å" in message.text.strip().lower() or "delete" in message.text.strip().lower()):
            clear(message)
        elif data[message.from_user.id]['flag'] and ("—Ñ–æ–Ω" in message.text.strip().lower() or "remove" in message.text.strip().lower() or "—É–±—Ä–∞—Ç—å" in message.text.strip().lower() or "background" in message.text.strip().lower()):
            bg_remover(message)
        for key, value in data[message.from_user.id]['colors'].items():
            if value == []:
                src = key
                data[message.from_user.id]['flag'] = True
                break
            else:
                data[message.from_user.id]['flag'] = False
        if data[message.from_user.id]['flag'] and ("–ø–∞–ª–∏—Ç—Ä–∞" in message.text.strip().lower() or "colors" in message.text.strip().lower() or "—Ü–≤–µ—Ç–∞" in message.text.strip().lower()):
            bot.send_message(message.chat.id, "–¢—ã –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ, —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ —Ü–≤–µ—Ç–∞:")
            palette = ''
            color_palette = ct(src).get_palette(color_count=11, quality=11)
            for color in color_palette:
                palette += webcolors.rgb_to_hex(color) + "\n"
            bot.send_message(message.chat.id, palette)
            for el in palette.splitlines():
                data[message.from_user.id]['colors'][src].append(el)
                # bot.send_message(chat_id=update.message.chat_id, text=f"<a href='https://www.colorhexa.com/{el[1:]}.png'>{el}</a>",parse_mode=ParseMode.HTML)
            print(data)
            data[message.from_user.id]['flag'] = False
        elif "–ø–∞–ª–∏—Ç—Ä" in message.text.strip().lower() or "colors" in message.text.strip().lower() or "—Ü–≤–µ—Ç" in message.text.strip().lower():
            bot.send_message(message.chat.id, "–¢—ã –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ, —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ —Ü–≤–µ—Ç–∞:")
            palette = ''
            src = data[message.from_user.id]['photo']
            for color in data[message.from_user.id]['colors'][src]:
                palette += color + "\n"
            bot.send_message(message.chat.id, palette)
            print(data)
            data[message.from_user.id]['flag'] = False
    except Exception as ex:
        bot.reply_to(message, ex)


#[(116, 117, 118), (200, 145, 93), (21, 29, 20), (131, 165, 185), (67, 45, 27), (163, 199, 212)]

@bot.message_handler(content_types=["audio", "video", "document", "sticker", "voice", "poll"])
def get_strange_msg(message):
    bot.send_message(message.chat.id, "–û—á–µ–Ω—å –∫—Ä—É—Ç–æ, –Ω–æ —è –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é –æ–±—â–∞—Ç—å—Å—è –æ–±—ã—á–Ω—ã–º–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏")


bot.polling(none_stop=True, interval=0) #–æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–Ω-—Å—Ç–æ–ø –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
